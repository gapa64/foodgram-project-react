name: foodgram workflow
on: [push]
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt
      - name: Test with flake8 and django tests
        run: |
          python -m flake8 backend
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push backend
        uses: docker/build-push-action@v2
        with:
          no-cache: true
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
      - name: Build and Push frontend
        uses: docker/build-push-action@v2
        with:
          no-cache: true
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
      - name: Check out
        uses: actions/checkout@v2
  deploy:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    name: Deploy to a server via SSH
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Copy files via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: 'infra'
          overwrite: true
          target: '.'
      - name: Set up initial files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo DEBUG=${{ secrets.DEBUG }} > .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo NGINX_IP=${{ secrets.NGINX_IP }} >> .env
            echo BACKEND_IP=${{ secrets.BACKEND_IP }} >> .env
            echo INTERNAL_SUBNET=${{ secrets.INTERNAL_SUBNET }} >> .env
            cd infra
            sudo docker compose down
            sudo docker compose --env-file ../.env up -d
            sudo docker compose exec -T backend python manage.py makemigrations
            sudo docker compose exec -T backend python manage.py migrate
            sudo docker compose exec -T backend python manage.py collectstatic --no-input
            sudo docker compose exec -T backend python manage.py loaddata fixtures/ingredints.json
            sudo docker compose exec -T backend python manage.py loaddata fixtures/recipes.json
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
